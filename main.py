# main.py

import streamlit as st
from PIL import Image
import pandas as pd
import requests
import os
from feature_extraction import extract_features
import pickle as pkl
import numpy as np

# Add a button to clear the cache
if st.button("Clear Cache"):
    # Clear the cache
    for key in st.session_state.keys():
        st.session_state.pop(key)

# Variable to check if the feature extraction code has been loaded
feature_code_loaded = False

@st.cache_data
def load_pdf_features_from_github():
    # Load features extraction code from GitHub
    response = requests.get("https://raw.githubusercontent.com/22540008/PDFMalware2/main/feature_extraction.py")
    code = response.text
    return code

def load_feature_module():
    global feature_code_loaded

    # Load features extraction code from GitHub if not already loaded
    if not feature_code_loaded:
        feature_code = load_pdf_features_from_github()
        exec(feature_code, globals())  # Execute the loaded code with the global namespace
        feature_code_loaded = True

def save_uploaded_file(uploaded_file):
    # Ensure the 'temp' directory exists
    temp_dir = "temp"
    os.makedirs(temp_dir, exist_ok=True)

    # Save the uploaded file to a temporary location
    pdf_path = os.path.join(temp_dir, uploaded_file.name)
    with open(pdf_path, "wb") as f:
        f.write(uploaded_file.read()) 
    return pdf_path

# def displayPDF(uploaded_file):
    
#     # Read file as bytes:
#     bytes_data = uploaded_file.getvalue()

#     # Convert to utf-8
#     base64_pdf = base64.b64encode(bytes_data).decode('utf-8')

#     # Embed PDF in HTML
#     pdf_display = F'<iframe src="data:application/pdf;base64,{base64_pdf}" width="700" height="100" type="application/pdf"></iframe>'

#     # Display file
#     st.markdown(pdf_display, unsafe_allow_html=True)

def main():
    global feature_code_loaded  # Use the global variable

    class_list = {'0': 'Benign', '1': 'Malicious'}

    # Load the pre-trained model from GitHub
    url = "https://raw.githubusercontent.com/22540008/PDFMalware2/main/decision_tree_cv.pkl"
    response = requests.get(url)
    open('decision_tree_cv.pkl', 'wb').write(response.content)
    
    input = open('decision_tree_cv.pkl', 'rb')
    model = pkl.load(input)

    # Load the encoder_dict from GitHub
    encoder_dict_url = "https://github.com/22540008/PDFMalware2/raw/main/encoder_dict.pkl"
    response = requests.get(encoder_dict_url)
    with open('encoder_dict.pkl', 'wb') as f:
        f.write(response.content)
    
    with open('encoder_dict.pkl', 'rb') as f:
        encoder_dict = pkl.load(f)

    st.title("PDF Analysis App")
    
    # Use the GitHub raw content URL for the image
    image_url = "https://raw.githubusercontent.com/22540008/PDFMalware2/main/Malicious%20pdf.jpg"
    image = Image.open(requests.get(image_url, stream=True).raw)
    
    # Check if the image is successfully loaded
    if image:
        st.image(image)
    else:
        st.warning("Failed to load the image.")
    
    uploaded_file = st.file_uploader("Upload a PDF file", type=["pdf"])

    # if uploaded_file:
    #     displayPDF(uploaded_file)
    
    # Add a button to trigger another task
    if st.button("Extract Features and Predict"):
        # Load the feature extraction module
        load_feature_module()

        # Save the uploaded file to a temporary location
        pdf_path = save_uploaded_file(uploaded_file)

        # Extract features from the PDF content
        features_df = extract_features(pdf_path)

        # Display the results
        st.dataframe(features_df)

        # Predict
        for column, encoder in encoder_dict.items():
            if column in features_df.columns:
                features_df[column] = features_df[column].map(lambda x: encoder.transform([x])[0] if x in encoder.classes_ else x)

        try:
            label = str(model.predict(features_df.iloc[[0]])[0])
            st.header('Result')

            # Use Streamlit's native styling
            if label == '0':
                st.markdown(f'<div style="color:green; font-weight:bold; font-size:24px;">{class_list[label]}</div>', unsafe_allow_html=True)
            elif label == '1':
                st.markdown(f'<div style="color:red; font-weight:bold; font-size:24px;">{class_list[label]}</div>', unsafe_allow_html=True)

        except IndexError:
            # Handle the IndexError 
            st.warning(f'Failed to load the pdf. Be careful for potential risks!')

        # Store features_df in st.session_state for later use
        st.session_state.features_df = features_df
            

if __name__ == "__main__":
    main()
